import os
import json
import telebot
import logging
import time
from datetime import date, datetime
from random import choice
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from dotenv import load_dotenv

load_dotenv()

STICKERS = (
# –≤—Å—Ç–∞–≤–∏—Ç—å –∞–π–¥–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = os.getenv("USER_ID")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
DEMILITARIZATION_DATE_STR = os.getenv("DEMILITARIZATION_DATE")
STATE_FILE = "sticker_state.json"
LOG_FILE = "user_logs.json"

bot = telebot.TeleBot(BOT_TOKEN)

with open("phrases.json", "r", encoding="utf-8") as f:
    PHRASES = json.load(f)

try:
    DEMILITARIZATION_DATE = date.fromisoformat(DEMILITARIZATION_DATE_STR)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ: {e}")
    DEMILITARIZATION_DATE = None

def log_user_activity(user_id, username, command, message_text=""):
    try:
        logs = []
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                logs = json.load(f)
        
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "user_id": str(user_id),
            "username": username or "Unknown",
            "command": command,
            "message": message_text[:100] if message_text else ""
        }
        logs.append(log_entry)
        
        if len(logs) > 1000:
            logs = logs[-1000:]
        
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=2)
        
        logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or 'Unknown'} (ID: {user_id}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {command}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

def choose_sticker_without_repeat(stickers, key):
    if not stickers:
        return None
    state = load_sticker_state()
    last = state.get(key)
    candidates = [s for s in stickers if s != last]
    if not candidates:
        candidates = stickers
    selected = choice(candidates)
    state[key] = selected
    save_sticker_state(state)
    return selected

def load_sticker_state():
    try:
        if not os.path.exists(STATE_FILE):
            return {}
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            return json.load(f) or {}
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")
        return {}

def save_sticker_state(state):
    try:
        with open(STATE_FILE, "w", encoding="utf-8") as f:
            json.dump(state, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–æ–≤: {e}")

def send_daily_update():
    recipients = {str(USER_ID), str(ADMIN_USER_ID)}

    if not recipients:
        logging.error("–ù–∏ USER_ID, –Ω–∏ ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    if not DEMILITARIZATION_DATE:
        error_msg = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ –¥–µ–º–±–µ–ª—è."
        for uid in recipients:
            try:
                bot.send_message(uid, error_msg)
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É/–ø–æ–ª—É—á–∞—Ç–µ–ª—é {uid}: {e}")
        return

    today = date.today()
    days_left = (DEMILITARIZATION_DATE - today).days

    if days_left < 0:
        msg = "üéâ –£–†–ê! –¢–≤–æ–π –ø–∞—Ä–µ–Ω—å —É–∂–µ –¥–µ–º–±–µ–ª—å! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! ü•≥"
    elif days_left == 0:
        msg = "–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –¥–µ–º–±–µ–ª—è! üéä –û–Ω —Å–≤–æ–±–æ–¥–µ–Ω! –ë–µ–≥–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å! üíÉ"
    else:
        phrase = choice(PHRASES)
        msg = f"–î–æ –¥–µ–º–±–µ–ª—è —Ç–≤–æ–µ–≥–æ –ø–∞—Ä–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: *{days_left}* –¥–Ω–µ–π üíñ\n\n{phrase}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for uid in recipients:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–º–±–µ–ª—è
            bot.send_message(uid, msg, parse_mode="Markdown")

            markup = telebot.types.InlineKeyboardMarkup()
            item2 = telebot.types.InlineKeyboardButton("üíñ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="hug")
            markup.add(item2)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä

            sticker_id = choose_sticker_without_repeat(STICKERS, "status")
            bot.send_sticker(uid, sticker_id, reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

def send_morning_greeting():
    recipients = {str(USER_ID), str(ADMIN_USER_ID)}
    if not recipients:
        logging.error("–ù–∏ USER_ID, –Ω–∏ ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    logging.info("üåÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
    text = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è"
    markup = telebot.types.InlineKeyboardMarkup()
    item2 = telebot.types.InlineKeyboardButton("üíñ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="hug")
    markup.add(item2)

    for uid in recipients:
        try:
            bot.send_message(uid, text)
            sticker_id = choose_sticker_without_repeat(STICKERS, "morning")
            if sticker_id:
                bot.send_sticker(uid, sticker_id, reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

def send_night_greeting():
    recipients = {str(USER_ID), str(ADMIN_USER_ID)}
    if not recipients:
        logging.error("–ù–∏ USER_ID, –Ω–∏ ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    logging.info("üåô –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ—á–Ω–æ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
    text = "–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! üåô"
    markup = telebot.types.InlineKeyboardMarkup()
    item2 = telebot.types.InlineKeyboardButton("üíñ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="hug")
    markup.add(item2)

    for uid in recipients:
        try:
            bot.send_message(uid, text)
            sticker_id = choose_sticker_without_repeat(STICKERS, "night")
            if sticker_id:
                bot.send_sticker(uid, sticker_id, reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

# Inline –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.InlineKeyboardMarkup()
    item1 = telebot.types.InlineKeyboardButton("üóì –°—Ç–∞—Ç—É—Å –¥–µ–º–±–µ–ª—è", callback_data="status")
    markup.add(item1)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–∏ –¥–æ –¥–µ–º–±–µ–ª—è.", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "status")
def send_status(call):
    send_daily_update()
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "hug")
def send_hug(call):
    phrase = choice(PHRASES)
    bot.send_message(call.message.chat.id, f"ü§ó {phrase}")
    bot.answer_callback_query(call.id)

scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_update, CronTrigger(hour=9, minute=0, timezone="Asia/Shanghai"))
scheduler.add_job(send_morning_greeting, CronTrigger(hour=7, minute=0, timezone="Asia/Shanghai"))
scheduler.add_job(send_night_greeting, CronTrigger(hour=23, minute=0, timezone="Asia/Shanghai"))
scheduler.start()

def run_bot_safe():
    while True:
        try:
            logging.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...")
            me = bot.get_me()
            logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API! –ë–æ—Ç: @{me.username} (id={me.id})")
            bot.polling(none_stop=True, skip_pending=True, timeout=20)
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            wait_time = 30
            logging.info(f"–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_time)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    try:
        run_bot_safe()
    except (KeyboardInterrupt, SystemExit):
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        scheduler.shutdown()
